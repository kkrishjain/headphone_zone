{%- comment -%}
  ----------------------------------------------------------------------------------------------------------------------
  Product Snapshot Component
  ----------------------------------------------------------------------------------------------------------------------

  This component is used to create snapshots icons on the product page.

  ********************************************
  Supported JSON parameters
  ********************************************
  {n} is for the position of the snapshot
  * s_brandname : Brand name
  * s_type : Product type but in singular form and only 1 word (Eg: IEM, Headphone, etc)
  * s_sound : Amazing or Epic or any Adjective of your choosing
  * s{n}_brand_click : To define if the snapshot is clickable or not. Supported Values: "yes" or "no"
  * s{n}_brand_emoji : Value associated with each icon type
  * s{n}_brand_text : text that will appears along side the icon.
  * s{n}_love_click : To define if the snapshot is clickable or not. Supported Values: "yes" or "no"
  * s{n}_love_emoji : Value associated with each icon type
  * s{n}_love_text : text that will appears along side the icon.
  * s{n}_sound_click : To define if the snapshot is clickable or not. Supported Values: "yes" or "no"
  * s{n}_sound_emoji : Value associated with each icon type
  * s{n}_sound_text : text that will appears along side the icon.

  Reference files :
  - snapshot-emoji.liquid : for all the emoji icons

  ********************************************
  Examples
  ********************************************

  {
      "s_brandname": "7HZ",
      "s_type": "IEM",
      "s_sound": "Amazing",
      "s1_brand_click": "yes",
      "s1_brand_emoji": "",
      "s1_brand_text": "",
      "s1_love_click": "yes",
      "s1_love_emoji": "",
      "s1_love_text": "",
      "s1_sound_click": "yes",
      "s1_sound_emoji": "",
      "s1_sound_text": ""
  }
{%- endcomment -%}

{% if product.metafields.hpz.snapshots_new_json.value != blank %}
  {% assign snapshot = product.metafields.hpz.snapshots_new_json.value %}
  {% assign snap_brandname = 's' | append: '_brandname' %}
  {% assign snap_type = 's' | append: '_type' %}
  {% assign snap_sound = 's' | append: '_sound' %}
  {% assign brandname = snapshot[snap_brandname] %}
  {% assign type = snapshot[snap_type] %}
  {% assign sound = snapshot[snap_sound] %}

  <div class="container mb50">
    <div class="snapshots-grid">
      <div class="snapshots-border">
        <p class="snapshot-header">Why {{ brandname }} is Special</p>
        {% for count in (1..8) %}
          {% assign snap_brand_click = 's' | append: count | append: '_brand_click' %}
          {% assign snap_brand_emoji = 's' | append: count | append: '_brand_emoji' %}
          {% assign snap_brand_text = 's' | append: count | append: '_brand_text' %}
          {% assign snap_brand_click = snapshot[snap_brand_click] %}
          {% assign snap_brand_emoji = snapshot[snap_brand_emoji] %}
          {% assign snap_brand_text = snapshot[snap_brand_text] %}
          {% if snap_brand_click != blank and snap_brand_click != '' %}
            {% if snap_brand_click == 'no' %}
              <span class="snapshots">
                <a class="snapshot-transition">
                  <div class="features-snapshot">{% render 'snapshot-emoji' with snap_brand_emoji %}</div>
                  <p class="new-text">{{ snap_brand_text }}</p>
                </a>
              </span>
            {% else %}
              <button aria-controls="{{ snap_brand_emoji }}" aria-expanded="false">
                <a class="snapshot-transition">
                  <div class="features-snapshot">{% render 'snapshot-emoji' with snap_brand_emoji %}</div>
                  <p class="new-text">{{ snap_brand_text }}</p>
                </a>
              </button>
              <x-drawer id="{{ snap_brand_emoji }}" class="drawer">
                <div>{% render 'snapshot-popover' with snap_brand_emoji %}</div>
              </x-drawer>
            {% endif %}
          {% endif %}
        {% endfor %}
      </div>
      <div class="snapshots-border">
        <p class="snapshot-header">Why we love this {{ type }}</p>
        {% for count in (1..8) %}
          {% assign snap_love_click = 's' | append: count | append: '_love_click' %}
          {% assign snap_love_emoji = 's' | append: count | append: '_love_emoji' %}
          {% assign snap_love_text = 's' | append: count | append: '_love_text' %}
          {% assign snap_love_click = snapshot[snap_love_click] %}
          {% assign snap_love_emoji = snapshot[snap_love_emoji] %}
          {% assign snap_love_text = snapshot[snap_love_text] %}
          {% if snap_love_click != blank and snap_love_click != '' %}
            {% if snap_love_click == 'no' %}
              <span class="snapshots">
                <a class="snapshot-transition">
                  <div class="features-snapshot">{% render 'snapshot-emoji' with snap_love_emoji %}</div>
                  <p class="new-text">{{ snap_love_text }}</p>
                </a>
              </span>
            {% else %}
              <button aria-controls="{{ snap_love_emoji }}" aria-expanded="false">
                <a class="snapshot-transition">
                  <div class="features-snapshot">{% render 'snapshot-emoji' with snap_love_emoji %}</div>
                  <p class="new-text">{{ snap_love_text }}</p>
                </a>
              </button>
              <x-drawer id="{{ snap_love_emoji }}" class="drawer">
                <div>{% render 'snapshot-popover' with snap_love_emoji %}</div>
              </x-drawer>
            {% endif %}
          {% endif %}
        {% endfor %}
      </div>
      <div class="snapshots-last-column">
        <p class="snapshot-header">Why it Sounds {{ sound }}</p>
        {% for count in (1..8) %}
          {% assign snap_sound_click = 's' | append: count | append: '_sound_click' %}
          {% assign snap_sound_emoji = 's' | append: count | append: '_sound_emoji' %}
          {% assign snap_sound_text = 's' | append: count | append: '_sound_text' %}
          {% assign snap_sound_click = snapshot[snap_sound_click] %}
          {% assign snap_sound_emoji = snapshot[snap_sound_emoji] %}
          {% assign snap_sound_text = snapshot[snap_sound_text] %}
          {% if snap_sound_click != blank and snap_sound_click != '' %}
            {% if snap_sound_click == 'no' %}
              <span class="snapshots">
                <a class="snapshot-transition">
                  <div class="features-snapshot">{% render 'snapshot-emoji' with snap_sound_emoji %}</div>
                  <p class="new-text">{{ snap_sound_text }}</p>
                </a>
              </span>
            {% else %}
              <button aria-controls="{{ snap_sound_emoji }}" aria-expanded="false">
                <a class="snapshot-transition">
                  <div class="features-snapshot">{% render 'snapshot-emoji' with snap_sound_emoji %}</div>
                  <p class="new-text">{{ snap_sound_text }}</p>
                </a>
              </button>
              <x-drawer id="{{ snap_sound_emoji}}" class="drawer">
                <div>{% render 'snapshot-popover' with snap_sound_emoji %}</div>
              </x-drawer>
            {% endif %}
          {% endif %}
        {% endfor %}
      </div>
    </div>
  </div>
{% endif %}
<style>
  .features-snapshot {
    font-size: 30px;
    vertical-align: middle;
    padding-right: 5px;
    margin-right: 0.3em;
    transition: transform .3s ease;
    -webkit-transition: -webkit-transform .3s ease;
    -moz-transition: -moz-transform .3s ease;
  }

  .snapshots-grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    border-radius: var(--rounded-lg);
    box-shadow: var(--shadow-block);
    padding-top: 10px;
    padding-bottom: 10px;
    background-color:#fff;
  }
  @media screen and (min-width: 700px) {
    .snapshots-border { border-right: 2px solid #C5C5C5; padding-left: 60px; }
    .snapshots-grid { padding-top: 50px; padding-bottom: 40px;}
    .snapshots-last-column { padding-left: 60px; }
  }

  @media screen and (max-width: 700px) {
    .snapshot-header { font-size: 21px!important; }
    .snapshots-last-column { padding: 40px; }
    .snapshot-header { padding-bottom: 20px!important;}
    .snapshots-grid { grid-template-columns: 1fr; border-radius: 1.25rem!important; padding-left:0px;}
    .snapshots-border { padding: 40px; border-bottom: 2px solid #C5C5C5; border-right: none!important;}
    .new-text{ font-size:16px; }
  }
  .snapshot-transition {
    display: block;
    display: flex;
    align-items: center;
    padding: 0.15em 0;
  }
  a:hover { color: #000;}
  a:hover .features-snapshot { transform: scale(1.3); -webkit-transform: scale(1.3); -moz-transform: scale(1.3);}
  a:hover .new-text { text-decoration:underline; text-underline-offset: 5px; } 
  .new-text {
    font-family: 'Sora';
    font-weight: 500;
    vertical-align: middle;
    transition: transform .3s ease;
    -webkit-transition: -webkit-transform .3s ease;
    -moz-transition: -moz-transform .3s ease;
    line-height: 1.4em;
    background: linear-gradient(to right, currentCo lor, currentColor) 0 min(100%, 1.35em) / 0 1px no-repeat;
    transition: background-size .3s ease-in-out;
    font-size:16px;
  }
  .snapshots { display:block; }
  .mb50 { margin-bottom: 50px; }
  .snapshot-header {
    font-family: "sora", sans-serif;
    font-weight: var(--heading-font-weight);
    font-style: var(--heading-font-style);
    letter-spacing: var(--heading-letter-spacing);
    text-transform: var(--heading-text-transform);
    color: #444444 !important;
    font-size:24px;
    padding-bottom:28px;
  }

  .snapshots-border button, .snapshots-last-column button {
    display: list-item;
  }
</style>
{% schema %}
  {
    "name": "New Snapshots",
    "settings": [],
    "presets": [
      { 
        "name": "New Snapshots" 
      }
    ]
  }
{% endschema %}
